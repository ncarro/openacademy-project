# -*- coding: utf-8 -*-

from psycopg2 import IntegrityError

from openerp.tests.common import TransactionCase
from openerp.tools import mute_logger
from openerp.exceptions import ValidationError

class GlobalTestOpenAcademySession(TransactionCase):
    '''
    This creates global√± test for sessions
    '''

    def setUp(self):
        super(GlobalTestOpenAcademySession, self).setUp()
        self.session = self.env['openacademy.session']
        self.partner = self.env.ref('base.res_partner_10')
        self.course = self.env.ref('openacademy.course0')
        self.partner_attende = self.env.ref('base.res_partner_2')


    def test_10_instructor_is_attende(self):
        '''
        '''
        with self.assertRaisesRegexp(
                ValidationError,
                "A session's instructor can't be an attendee"
                ):
            self.session.create({
                'name': 'Session test 1',
                'seats': 1,
                'instructor_id': self.partner.id,
                'attendee_ids': [(6, 0, [self.partner.id])],
                'course_id': self.course.id,
                })

    def test_20_wkf_done(self):
        '''
        Chek thar workflow works fine
        '''
        session_test = self.session.create({
            'name': 'Session test 1',
            'seats': 200,
            'instructor_id': self.partner.id,
            'attendee_ids': [(6, 0, [self.partner_attende.id])],
            'course_id': self.course.id,
            })
        # Check initial state
        self.assertEqual(session_test.state, 'draft', 'Initial State should be in draft')

        # Change state and check it
        session_test.signal_workflow('button_confirm')
        self.assertEqual(session_test.state, 'confirmed', "Signal confirm didn't work")

        # Change state and check it
        session_test.signal_workflow('button_done')
        self.assertEqual(session_test.state, 'done', "Signal done didn't work")
        # self.env.cr.commit() # Just to test the data generated by the test
